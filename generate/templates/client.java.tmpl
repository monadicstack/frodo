// Code generated by Frodo from {{ .Path }} - DO NOT EDIT
//
//   https://github.com/monadicstack/frodo
//
package {{ .InputPackage.Import | JavaPackage }};

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;

import com.fasterxml.jackson.core.ObjectMapper;

{{ $ctx := . -}}
{{ range .Services -}}
{{ $clientName := (print .Name "Client") -}}
{{ $interfaceName := .Name -}}
public interface {{ $interfaceName }} {
    {{ range .Functions }}
    CompletableFuture<{{ .Response.Name }}> {{.Name | ToLowerCamel }}(request {{ .Request.Name }});
    {{ end }}
}

public class {{ $clientName }} implements {{ $interfaceName }} {
    private String baseURL;
    private HttpClient httpClient;
    private Marshaler marshaler;
    private String pathPrefix;
    private Duration timeout;

    public {{ $clientName }}(String baseURL) {
        this(HttpClient.newHttpClient(), new JacksonMarshaler());
    }

    public {{ $clientName }}(String baseURL, HttpClient httpClient) {
        this(client, new JacksonMarshaler());
    }

    public {{ $clientName }}(String baseURL, Marshaler marshaler) {
        this(HttpClient.newHttpClient(), marshaler);
    }

    public {{ $clientName }}(String baseURL, HttpClient httpClient, Marshaler marshaler) {
        this.baseURL = baseURL;
        this.httpClient = httpClient;
        this.marshaler = marshaler;
    }

    public {{ $clientName }} withPathPrefix(String prefix) {
        this.pathPrefix = prefix;
    }

    public {{ $clientName }} withTimeout(Duration timeout) {
        this.timeout = timeout;
    }

    {{ range .Functions }}
    @Override
    public CompletableFuture<{{ .Response.Name }}> {{.Name | ToLowerCamel }}(request {{ .Request.Name }}) {
        var method = "{{ .Gateway.Method }}";
        var path = "{{ .Gateway.Path }}";
        var url = this.baseURL + "/" + this.buildRequestPath(method, path, request);
        {{if .Gateway.SupportsBody }}var body = BodyPublishers.ofString(marshaler.marshal(request));{{ end }}
        {{if not .Gateway.SupportsBody }}var body = BodyPublishers.noBody();{{ end }}

        HttpRequest httpRequest = HttpRequest.newBuilder()
            .uri(URI.create(url))
            .timeout(timeout)
            .header("Content-Type", "application/json")
            .method(method, body)
            .build();

        return httpClient.sendAsync(httpRequest, BodyHandlers.ofString())
            .then(r -> handleResponse({{ .Response.Name }}.class, r);
    }
    {{ end }}

    private <T extends ServiceModel> String buildRequestPath(String method, String path, T model) {
        return path;
    }

    private <T extends ServiceModel> T handleResponse(Class<T> type, HttpResponse<String> httpResponse) {
        if (httpResponse.statusCode() >= 400) {
            throw new RuntimeException(httpResponse.body());
        }
        return marshaler.unmarshal(type, httpResponse.body());
    }
}
{{ end }}

class ServiceModel {
}

{{ range .Models }}
public class {{ .Name }} extends ServiceModel {

}
{{ end }}

public interface Marshaler {
    String marshal(Object value);
    <T> T unmarshal(Class<T> type, String jsonBytes);
}

class JacksonMarshaler implements Marshaler {
    private ObjectMapper mapper;

    public JacksonMarshaler() {
        this.mapper = new ObjectMapper();
    }

    @Override
    public String marshal(Object value) {
        return mapper.writeValueAsString(value);
    }

    @Override
    public <T> T unmarshal(Class<T> type, String jsonString) {
        return objectMapper.readValue(jsonString, type);
    }
}
