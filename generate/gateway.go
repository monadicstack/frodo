package generate

// TemplateGatewayGo is the text template for the Go server/gateway (accepts incoming RPC requests)
var TemplateGatewayGo = parseArtifactTemplate("gateway.go", `// !!!!!!! DO NOT EDIT !!!!!!!
// Auto-generated by Frodo from service definition {{ .Path }}
// https://github.com/robsignorelli/frodo
// !!!!!!! DO NOT EDIT !!!!!!!
package {{ .OutputPackage.Name }}

import (
	"net/http"

	"github.com/robsignorelli/respond"
	"github.com/robsignorelli/frodo/rpc"
	"{{ .Package.Import }}"
)

{{ $ctx := . }}
{{ range .Services }}
// New{{ .Name }}Gateway accepts your "real" {{ .Name }} instance (the thing that really does the work), and
// exposes it to other services/clients over RPC. The rpc.Gateway it returns implements http.Handler, so you
// can pass it to any standard library HTTP server of your choice.
//
//	// How to fire up your service for RPC and/or your REST API
//	service := {{ $ctx.Package.Name }}.{{ .Name }}{ /* set up to your liking */ }
//	gateway := {{ $ctx.OutputPackage.Name }}.New{{ .Name }}Gateway(service)
//	http.ListenAndServe(":8080", gateway)
//
// The default instance works well enough, but you can supply additional options such as WithMiddleware() which
// accepts any negroni-compatible middleware handlers.
func New{{ .Name }}Gateway(service {{ $ctx.Package.Name }}.{{ .Name }}, options ...rpc.GatewayOption) rpc.Gateway {
	gw := rpc.NewGateway(options...)
	gw.Name = "{{ .Name }}"
	gw.PathPrefix = "{{ .Gateway.PathPrefix }}"

	{{ $service := . }}
	{{ range $service.Functions }}
	gw.Register(rpc.Endpoint{
		Method:      "{{ .Gateway.Method }}",
		Path:        "{{ .Gateway.Path }}",
		ServiceName: "{{ $service.Name }}",
		Name:        "{{ .Name }}",
		Handler:     func(w http.ResponseWriter, req *http.Request) {
			response := respond.To(w, req)

			serviceRequest := {{ $ctx.Package.Name }}.{{ .Request.Name }}{}
			if err := gw.Binder.Bind(req, &serviceRequest); err != nil {
				response.Fail(err)
				return
			}

			serviceResponse, err := service.{{ .Name }}(req.Context(), &serviceRequest)
			response.Reply({{ .Gateway.Status }}, serviceResponse, err)
		},
	})
	{{ end }}

	return gw
}
{{end}}
`)
