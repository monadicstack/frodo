// Code generated by Frodo from example/names/name_service.go - DO NOT EDIT
//
//   https://github.com/monadicstack/frodo
//
import 'dart:async';
import 'dart:convert';
import 'dart:io';

class NameServiceClient {
  static const String pathPrefix = '';

  final String baseURL;
  String authorization;
  HttpClient httpClient = HttpClient();

  NameServiceClient(this.baseURL, {
      this.authorization = '',
  });


  Future<FirstNameResponse> FirstName(FirstNameRequest serviceRequest, {String authorization = ''}) async {
    var requestJson = serviceRequest.toJson();
    var method = 'POST';
    var route = '/NameService.FirstName';
    var url = _joinUrl([baseURL, pathPrefix, _buildRequestPath(method, route, requestJson)]);

    var httpRequest = await httpClient.openUrl(method, Uri.parse(url));
    httpRequest.headers.set('Accept', 'application/json');
    httpRequest.headers.set('Authorization', _authorize(authorization));
    httpRequest.headers.set('Content-Type', 'application/json');
    httpRequest.write(jsonEncode(requestJson));

    var httpResponse = await httpRequest.close();
    return _handleResponse(httpResponse, (json) => FirstNameResponse.fromJson(json));
  }

  Future<LastNameResponse> LastName(LastNameRequest serviceRequest, {String authorization = ''}) async {
    var requestJson = serviceRequest.toJson();
    var method = 'POST';
    var route = '/NameService.LastName';
    var url = _joinUrl([baseURL, pathPrefix, _buildRequestPath(method, route, requestJson)]);

    var httpRequest = await httpClient.openUrl(method, Uri.parse(url));
    httpRequest.headers.set('Accept', 'application/json');
    httpRequest.headers.set('Authorization', _authorize(authorization));
    httpRequest.headers.set('Content-Type', 'application/json');
    httpRequest.write(jsonEncode(requestJson));

    var httpResponse = await httpRequest.close();
    return _handleResponse(httpResponse, (json) => LastNameResponse.fromJson(json));
  }

  Future<SortNameResponse> SortName(SortNameRequest serviceRequest, {String authorization = ''}) async {
    var requestJson = serviceRequest.toJson();
    var method = 'POST';
    var route = '/NameService.SortName';
    var url = _joinUrl([baseURL, pathPrefix, _buildRequestPath(method, route, requestJson)]);

    var httpRequest = await httpClient.openUrl(method, Uri.parse(url));
    httpRequest.headers.set('Accept', 'application/json');
    httpRequest.headers.set('Authorization', _authorize(authorization));
    httpRequest.headers.set('Content-Type', 'application/json');
    httpRequest.write(jsonEncode(requestJson));

    var httpResponse = await httpRequest.close();
    return _handleResponse(httpResponse, (json) => SortNameResponse.fromJson(json));
  }

  Future<SplitResponse> Split(SplitRequest serviceRequest, {String authorization = ''}) async {
    var requestJson = serviceRequest.toJson();
    var method = 'POST';
    var route = '/NameService.Split';
    var url = _joinUrl([baseURL, pathPrefix, _buildRequestPath(method, route, requestJson)]);

    var httpRequest = await httpClient.openUrl(method, Uri.parse(url));
    httpRequest.headers.set('Accept', 'application/json');
    httpRequest.headers.set('Authorization', _authorize(authorization));
    httpRequest.headers.set('Content-Type', 'application/json');
    httpRequest.write(jsonEncode(requestJson));

    var httpResponse = await httpRequest.close();
    return _handleResponse(httpResponse, (json) => SplitResponse.fromJson(json));
  }


  String _buildRequestPath(String method, String route, Map<String, dynamic> requestJson) {
    String stringify(Map<String, dynamic> json, String key) {
      return Uri.encodeComponent(json[key]?.toString() ?? '');
    }
    String stringifyAndRemove(Map<String, dynamic> json, String key) {
      return Uri.encodeComponent(json.remove(key)?.toString() ?? '');
    }

    // Since we're embedding values in a path or query string, we need to flatten "{a: {b: {c: 4}}}"
    // down to "a.b.c=4" for it to fit nicely into our URL-based binding.
    requestJson = _flattenJson(requestJson);

    var resolvedPath = route
      .split('/')
      .map((s) => s.startsWith(':') ? stringifyAndRemove(requestJson, s.substring(1)) : s)
      .join('/');

    // These encode the data in the body, so no need to shove it in the query string.
    if (method == 'POST' || method == 'PUT' || method == 'PATCH') {
      return resolvedPath;
    }

    // GET/DELETE/etc will pass all values through the query string.
    var queryValues = requestJson.keys
      .map((key) => key + '=' + stringify(requestJson, key))
      .join('&');

    return resolvedPath + '?' + queryValues;
  }

  Future<T> _handleResponse<T>(HttpClientResponse httpResponse, T Function(Map<String, dynamic>) factory) async {
    var bodyCompleter = new Completer<String>();
    httpResponse.transform(utf8.decoder).listen(bodyCompleter.complete);
    var bodyText = await bodyCompleter.future;

    if (httpResponse.statusCode >= 400) {
      throw new NameServiceException(httpResponse.statusCode, _parseErrorMessage(bodyText));
    }

    return factory(jsonDecode(bodyText));
  }

  String _parseErrorMessage(String bodyText) {
    try {
      Map<String, dynamic> json = jsonDecode(bodyText);
      return json['message'] ?? json['error'] ?? bodyText;
    }
    catch (_) {
      return bodyText;
    }
  }

  String _authorize(String callAuthorization) {
    return callAuthorization.trim().isNotEmpty
      ? callAuthorization
      : authorization;
  }

  String _joinUrl(List<String> segments) {
    String stripLeadingSlash(String s) {
      while (s.startsWith('/')) {
        s = s.substring(1);
      }
      return s;
    }
    String stripTrailingSlash(String s) {
      while (s.endsWith('/')) {
        s = s.substring(0, s.length - 1);
      }
      return s;
    }
    bool notEmpty(String s) {
      return s.isNotEmpty;
    }

    return segments
        .map(stripLeadingSlash)
        .map(stripTrailingSlash)
        .where(notEmpty)
        .join('/');
  }

  Map<String, dynamic> _flattenJson(Map<String, dynamic> json) {
    // Adds the given json map entry to the accumulator map. The 'path' contains
    // the period-delimited path for all parent objects we've recurred down from.
    void flattenEntry(String path, String key, dynamic value, Map<String, dynamic> accum) {
      if (value == null) {
        return;
      }

      path = path == '' ? key : '$path.$key';
      if (value is Map<String, dynamic>) {
        value.keys.forEach((key) => flattenEntry(path, key, value[key], accum));
        return;
      }
      accum[path] = value;
    }

    Map<String, dynamic> result = Map<String, dynamic>();
    json.keys.forEach((key) => flattenEntry("", key, json[key], result));
    return result;
  }
}

class NameServiceException implements Exception {
    int status;
    String message;

    NameServiceException(this.status, this.message);
}


class LastNameRequest implements NameServiceModelJSON {
  String? Name;

  LastNameRequest({
    this.Name,
  });

  LastNameRequest.fromJson(Map<String, dynamic> json) {
    Name = json['Name'];
  }

  Map<String, dynamic> toJson() {
    return {
      'Name': Name,
    };
  }
}

class LastNameResponse implements NameServiceModelJSON {
  String? LastName;

  LastNameResponse({
    this.LastName,
  });

  LastNameResponse.fromJson(Map<String, dynamic> json) {
    LastName = json['LastName'];
  }

  Map<String, dynamic> toJson() {
    return {
      'LastName': LastName,
    };
  }
}

class SplitResponse implements NameServiceModelJSON {
  String? FirstName;
  String? LastName;

  SplitResponse({
    this.FirstName,
    this.LastName,
  });

  SplitResponse.fromJson(Map<String, dynamic> json) {
    FirstName = json['FirstName'];
    LastName = json['LastName'];
  }

  Map<String, dynamic> toJson() {
    return {
      'FirstName': FirstName,
      'LastName': LastName,
    };
  }
}

class SortNameRequest implements NameServiceModelJSON {
  String? Name;

  SortNameRequest({
    this.Name,
  });

  SortNameRequest.fromJson(Map<String, dynamic> json) {
    Name = json['Name'];
  }

  Map<String, dynamic> toJson() {
    return {
      'Name': Name,
    };
  }
}

class FirstNameRequest implements NameServiceModelJSON {
  String? Name;

  FirstNameRequest({
    this.Name,
  });

  FirstNameRequest.fromJson(Map<String, dynamic> json) {
    Name = json['Name'];
  }

  Map<String, dynamic> toJson() {
    return {
      'Name': Name,
    };
  }
}

class SplitRequest implements NameServiceModelJSON {
  String? Name;

  SplitRequest({
    this.Name,
  });

  SplitRequest.fromJson(Map<String, dynamic> json) {
    Name = json['Name'];
  }

  Map<String, dynamic> toJson() {
    return {
      'Name': Name,
    };
  }
}

class FirstNameResponse implements NameServiceModelJSON {
  String? FirstName;

  FirstNameResponse({
    this.FirstName,
  });

  FirstNameResponse.fromJson(Map<String, dynamic> json) {
    FirstName = json['FirstName'];
  }

  Map<String, dynamic> toJson() {
    return {
      'FirstName': FirstName,
    };
  }
}

class NameRequest implements NameServiceModelJSON {
  String? Name;

  NameRequest({
    this.Name,
  });

  NameRequest.fromJson(Map<String, dynamic> json) {
    Name = json['Name'];
  }

  Map<String, dynamic> toJson() {
    return {
      'Name': Name,
    };
  }
}

class SortNameResponse implements NameServiceModelJSON {
  String? SortName;

  SortNameResponse({
    this.SortName,
  });

  SortNameResponse.fromJson(Map<String, dynamic> json) {
    SortName = json['SortName'];
  }

  Map<String, dynamic> toJson() {
    return {
      'SortName': SortName,
    };
  }
}


class NameServiceModelJSON {
  Map<String, dynamic> toJson() {
    throw new Exception('toJson not implemented');
  }
}

        List<T>? _map<T>(List<dynamic>? jsonList, T Function(dynamic) mapping) {
  return jsonList == null ? null : jsonList.map(mapping).toList();
}
