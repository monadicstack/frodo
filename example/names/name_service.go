package names

import (
	"context"
	"io"
)

// NameService performs parsing/processing on a person's name. This is primarily just
// used as a reference service for integration testing our generated clients.
type NameService interface {
	// Split separates a first and last name.
	Split(ctx context.Context, req *SplitRequest) (*SplitResponse, error)
	// FirstName extracts just the first name from a full name string.
	FirstName(ctx context.Context, req *FirstNameRequest) (*FirstNameResponse, error)
	// LastName extracts just the last name from a full name string.
	LastName(ctx context.Context, req *LastNameRequest) (*LastNameResponse, error)
	// SortName establishes the "phone book" name for the given full name.
	SortName(ctx context.Context, req *SortNameRequest) (*SortNameResponse, error)
	// Download returns a raw CSV file containing the parsed name.
	Download(ctx context.Context, req *DownloadRequest) (*DownloadResponse, error)
	// DownloadExt returns a raw CSV file containing the parsed name. This differs from Download
	// by giving you the "Ext" knob which will let you exercise the content type and disposition
	// interfaces that Frodo supports for raw responses.
	DownloadExt(ctx context.Context, req *DownloadExtRequest) (*DownloadExtResponse, error)
}

// NameRequest generalizes the data we pass to any of the name service functions.
type NameRequest struct {
	// Name is the full name we're going to process.
	Name string
}

// SplitRequest is the input for the Split function.
type SplitRequest NameRequest

// SplitResponse is the output for the Split function.
type SplitResponse struct {
	FirstNameResponse
	LastNameResponse
}

// FirstNameRequest is the input for the FirstName function.
type FirstNameRequest struct {
	// Name is the full name we're going to process.
	Name string
}

// FirstNameResponse is the output for the FirstName function.
type FirstNameResponse struct {
	// FirstName is the result we extracted.
	FirstName string
}

// LastNameRequest is the output for the LastName function.
type LastNameRequest struct {
	// Name is the full name we're going to process.
	Name string
}

// LastNameResponse is the output for the LastName function.
type LastNameResponse struct {
	// LastName is the result we extracted.
	LastName string
}

// SortNameRequest is the input for the SortName function.
type SortNameRequest struct {
	// Name is the full name we're going to process.
	Name string
}

// SortNameResponse is the output for the SortName function.
type SortNameResponse struct {
	// SortName is the result we extracted.
	SortName string
}

// DownloadRequest is the input for the Download function.
type DownloadRequest struct {
	// Name is the full name we're going to process.
	Name string
}

// DownloadResponse is the output for the Download function.
type DownloadResponse struct {
	reader io.ReadCloser
}

// Content returns the raw CSV bytes we generated.
func (r DownloadResponse) Content() io.ReadCloser {
	return r.reader
}

// SetContent allows clients to accept the raw bytes generated by the service gateway.
func (r *DownloadResponse) SetContent(reader io.ReadCloser) {
	r.reader = reader
}

// DownloadExtRequest is the input for the DownloadExt function.
type DownloadExtRequest struct {
	// Name is the full name we're going to process.
	Name string
	// Ext is the file extension we'll use for the resulting file (also used in the content type)
	Ext string
}

// DownloadExtResponse is the output for the DownloadExt function.
type DownloadExtResponse struct {
	DownloadResponse
	contentType     string
	contentFileName string
}

// ContentType returns the MIME content type of the resulting file.
func (r DownloadExtResponse) ContentType() string {
	return r.contentType
}

// SetContentType allows clients to accept the MIME content type specified by the gateway.
func (r *DownloadExtResponse) SetContentType(contentType string) {
	r.contentType = contentType
}

// ContentFileName returns the file name that the server wanted to call this file.
func (r DownloadExtResponse) ContentFileName() string {
	return r.contentFileName
}

// SetContentFileName allows the client to accept the file name.
func (r *DownloadExtResponse) SetContentFileName(contentFileName string) {
	r.contentFileName = contentFileName
}
