// Code generated by Frodo from calc/calculator_service.go - DO NOT EDIT
//
//   https://github.com/monadicstack/frodo
//
package calc

import (
	"net/http"

	"github.com/monadicstack/frodo/example/basic/calc"
	"github.com/monadicstack/frodo/rpc"
	"github.com/monadicstack/respond"
)

// NewCalculatorServiceGateway accepts your "real" CalculatorService instance (the thing that really does the work), and
// exposes it to other services/clients over RPC. The rpc.Gateway it returns implements http.Handler, so you
// can pass it to any standard library HTTP server of your choice.
//
//	// How to fire up your service for RPC and/or your REST API
//	service := calc.CalculatorService{ /* set up to your liking */ }
//	gateway := calc.NewCalculatorServiceGateway(service)
//	http.ListenAndServe(":8080", gateway)
//
// The default instance works well enough, but you can supply additional options such as WithMiddleware() which
// accepts any negroni-compatible middleware handlers.
func NewCalculatorServiceGateway(service calc.CalculatorService, options ...rpc.GatewayOption) rpc.Gateway {
	gw := rpc.NewGateway(options...)
	gw.Name = "CalculatorService"
	gw.PathPrefix = ""

	gw.Register(rpc.Endpoint{
		Method:      "POST",
		Path:        "/CalculatorService.Add",
		ServiceName: "CalculatorService",
		Name:        "Add",
		Handler: func(w http.ResponseWriter, req *http.Request) {
			response := respond.To(w, req)

			serviceRequest := calc.AddRequest{}
			if err := gw.Binder.Bind(req, &serviceRequest); err != nil {
				response.Fail(err)
				return
			}

			serviceResponse, err := service.Add(req.Context(), &serviceRequest)
			response.Reply(200, serviceResponse, err)
		},
	})

	gw.Register(rpc.Endpoint{
		Method:      "POST",
		Path:        "/CalculatorService.Sub",
		ServiceName: "CalculatorService",
		Name:        "Sub",
		Handler: func(w http.ResponseWriter, req *http.Request) {
			response := respond.To(w, req)

			serviceRequest := calc.SubRequest{}
			if err := gw.Binder.Bind(req, &serviceRequest); err != nil {
				response.Fail(err)
				return
			}

			serviceResponse, err := service.Sub(req.Context(), &serviceRequest)
			response.Reply(200, serviceResponse, err)
		},
	})

	return gw
}
